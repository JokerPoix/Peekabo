security:
    enable_authenticator_manager: true

    # Gestion des hachages de mots de passe
    password_hashers:
        App\Entity\User:
            algorithm: auto
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Fournisseurs d'utilisateurs
    providers:
        # Chargement des utilisateurs depuis la base de données
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Firewalls de sécurité
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        main:
            pattern: ^/
            lazy: true
            provider: app_user_provider
            stateless: true
            jwt: ~


    # Règles d'accès
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: ROLE_USER }

# Configuration spécifique à l'environnement de test
when@test:
    security:
        password_hashers:
            App\Entity\User:
                algorithm: auto
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Bcrypt : valeur minimale
                time_cost: 3 # Argon2 : valeur minimale
                memory_cost: 10 # Argon2 : valeur minimale

        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false

            login:
                pattern: ^/login
                stateless: true
                json_login:
                    check_path: /login
                    username_path: email
                    password_path: password
                    success_handler: lexik_jwt_authentication.handler.authentication_success
                    failure_handler: lexik_jwt_authentication.handler.authentication_failure

            main:
                pattern: ^/
                lazy: true
                provider: app_user_provider
                stateless: true
                jwt: ~  # Utilisation du JWT pour les tests

        access_control:
            - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
            - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
            - { path: ^/me, roles: IS_AUTHENTICATED_FULLY }


